// Copyright © 2021 Kris Nóva <kris@nivenly.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ────────────────────────────────────────────────────────────────────────────
//
//  ████████╗██╗    ██╗██╗███╗   ██╗██╗  ██╗
//  ╚══██╔══╝██║    ██║██║████╗  ██║╚██╗██╔╝
//     ██║   ██║ █╗ ██║██║██╔██╗ ██║ ╚███╔╝
//     ██║   ██║███╗██║██║██║╚██╗██║ ██╔██╗
//     ██║   ╚███╔███╔╝██║██║ ╚████║██╔╝ ██╗
//     ╚═╝    ╚══╝╚══╝ ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝
//
// ────────────────────────────────────────────────────────────────────────────

syntax = "proto3";

option go_package = "github.com/kris-nova/twinx/activestreamer";

package twinx;

// [ActiveStreamer] A simple interprocess message queue between the client and the server
service ActiveStreamer {
  rpc StartRTMP (RTMP) returns (Ack) {}
  rpc StopRTMP (RTMP) returns (Ack) {}
  rpc SetTwitchMeta (StreamMeta) returns (Ack) {}
  rpc SetYouTubeMeta (StreamMeta) returns (Ack) {}
  rpc GetStreamMeta (ClientConfig) returns (StreamMeta) {}
  rpc SetStreamMeta (StreamMeta) returns (Ack) {}
  rpc GetMessage (ClientConfig) returns (Ack) {}
  rpc SetLogger (LoggerConfig) returns (Ack) {}
}

message RTMP {
  int64 port = 1;
  int64 bufferSize = 2;
}

// Ack is a generic response. Can be successful, or returns an error message.
message Ack {
  bool success = 1;
  optional string message = 2;
}

message StreamMeta {
  // Generic title of your stream
  string title = 1;

  // Generic description of your stream
  string description = 2;

  // Optional list of tags or keywords to use with various services
  optional string tags = 3;
}

message ClientConfig {
  // TODO add auth token here if we would like to lock down the gRPC service
  optional string name = 1;
}


// LoggerConfig is a way to configure a logger with twinx
message LoggerConfig {

  // Path is the logger path on the local filesystem to send logs to.
  string path = 1;
}

